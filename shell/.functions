function bg_dark() {
    echo -e "\033]50;SetProfile=Zenburn\a";
}
function bg_light() {
    echo -e "\033]50;SetProfile=Solarized Light\a";
}
function bg_init() {
    # sync with VIM settings
    if [[ $(cat ~/.solarized) -eq 0 ]]
        then bg_dark
    else
        bg_light
    fi
}
bg_init
clear

function parse_changes() {
    # parses the CHANGES ($1) for given git-revision range
    # e.g. ./parse_change CHANGES.rst 0.14.3..0.15.0
    CHANGESFILE=$1
    REVISION_RANGE=$2
    git diff $REVISION_RANGE -- $CHANGESFILE | sed '/^\(+\)/!d' | sed s/^+// | sed '/^+/d'
}

# Mark - http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
function jump {
    cd -P $MARKPATH/$1 2>/dev/null || echo "No such mark: $1"
}
function mark {
    mkdir -p $MARKPATH; ln -s $(pwd) $MARKPATH/$1
}
function unmark {
    rm -i $MARKPATH/$1
}
function marks {
    ls -l $MARKPATH | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/ -/g' && echo
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@"
    }
fi

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified."
        return 1
    fi

    local domain="${1}"
    echo "Testing ${domain}…"
    echo # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
            | openssl s_client -connect "${domain}:443" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
                | openssl x509 -text -certopt "no_header, no_serial, no_version, \
                no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
        echo "Common Name:"
        echo # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
        echo # newline
        echo "Subject Alternative Name(s):"
        echo # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
                | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
        return 0
    else
        echo "ERROR: Certificate not found.";
        return 1
    fi
}

function bsd() {
    bin/supervisord
}
function bsc() {
    bin/supervisorctl $@
}
function bst() {
    bin/supervisorctl status
}
function bsr() {
    bin/supervisorctl restart $@
}
function bsrr() {
    # 'r'estart 'r'unning processes
    bin/supervisorctl restart $(bin/supervisorctl status | grep RUNNING | cut -d' ' -f1)
}
function bbo() {
    bin/buildout $@
}
function azki() {
    ps aux | grep \[i\]nstance | awk  '{ print $2 }' | xargs kill;
}

function start_az() {
    (cd ~/sandbox/az.app && bsd; bst)
}
function stop_az() {
    azki
    (cd ~/sandbox/az.app && bsc stop all && bsc shutdown)
}
function status_az() {
    echo 'az.app'
    echo '------'
    (cd ~/sandbox/az.app && bst)
}
function start_rawr() {
    (cd ~/sandbox/rawr-service && bsd; bst)
    (cd ~/sandbox/rawr-web && bsd; bst)
    (cd ~/sandbox/rawr-admin && bsd; bst)
}
function stop_rawr() {
    (cd ~/sandbox/rawr-service && bsc stop all && bsc shutdown)
    (cd ~/sandbox/rawr-web && bsc stop all && bsc shutdown)
    (cd ~/sandbox/rawr-admin && bsc stop all && bsc shutdown)
}
function status_rawr() {
    echo 'Service'
    echo '-------'
    (cd ~/sandbox/rawr-service && bst)
    echo ''
    echo 'Web'
    echo '---'
    (cd ~/sandbox/rawr-web && bst)
    echo ''
    echo 'Admin'
    echo '-----'
    (cd ~/sandbox/rawr-admin && bst)
}
function start_waf() {
    (cd ~/sandbox/waf-service && bsd; bst)
    (cd ~/sandbox/waf-web && bsd; bst)
    (cd ~/sandbox/waf-admin && bsd; bst)
}
function stop_waf() {
    (cd ~/sandbox/waf-service && bsc stop all && bsc shutdown)
    (cd ~/sandbox/waf-web && bsc stop all && bsc shutdown)
    (cd ~/sandbox/waf-admin && bsc stop all && bsc shutdown)
}
function status_waf() {
    echo 'Service'
    echo '-------'
    (cd ~/sandbox/waf-service && bst)
    echo ''
    echo 'Web'
    echo '---'
    (cd ~/sandbox/waf-web && bst)
    echo ''
    echo 'Admin'
    echo '-----'
    (cd ~/sandbox/waf-admin && bst)
}
